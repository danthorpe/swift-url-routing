{"metadata":{"roleHeading":"Type Method","externalID":"s:7Parsing10ConversionPAAE10memberwiseyAA11ConversionsO10MemberwiseVy_qd__qd_0_Gqd_0_qd__cAIRszr0_lFZ::SYNTHESIZED::s:7Parsing11ConversionsO38FixedWidthIntegerToBinaryFloatingPointV","symbolKind":"method","modules":[{"name":"Parsing"}],"title":"memberwise(_:)","extendedModule":"Parsing","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/Conversion-Implementations"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"sections":[],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/memberwise(_:)"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initializer"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Conversions","preciseIdentifier":"s:7Parsing11ConversionsO","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Memberwise","preciseIdentifier":"s:7Parsing11ConversionsO10MemberwiseV","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Memberwise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"text":"A conversion that can embed a tuple of values into a struct, and destructure a","type":"text"},{"text":" ","type":"text"},{"text":"struct back into a tuple of values.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"initializer","content":[{"inlineContent":[{"text":"A memberwise initializer where ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" directly maps to the memory","type":"text"},{"text":" ","type":"text"},{"text":"layout of ","type":"text"},{"type":"codeVoice","code":"Root"},{"text":", for example the internal, default initializer that is automatically","type":"text"},{"text":" ","type":"text"},{"text":"synthesized for structs.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Useful for transforming the output of a "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter","isActive":true},{"type":"text","text":" into a struct."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, given a simple "},{"type":"codeVoice","code":"Coordinate"},{"type":"text","text":" struct, we can build a parser-printer using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["struct Coordinate {","  var x: Double","  var y: Double","}","","let coord = ParsePrint(.memberwise(Coordinate.init(x:y:))) {","  \"(\"","  Double.parser()","  \",\"","  Double.parser()","  \")\"","}","","try coord.parse(\"(1,-2)\")           \/\/ Coordinate(x: 1.0, y: -2.0)","coord.print(.init(x: -5, y: 10))  \/\/ \"(-5.0,10.0)\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To transform the output of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"},{"type":"text","text":" into an enum, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Careful usage","level":2,"anchor":"Careful-usage","type":"heading"},{"inlineContent":[{"text":"This conversion works by using the memberwise initializer you supply to ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)","type":"reference","isActive":true},{"text":" in","type":"text"},{"text":" ","type":"text"},{"text":"order to turn tuples into a struct, and it uses ","type":"text"},{"code":"unsafeBitcast","type":"codeVoice"},{"text":" to turn the struct back into","type":"text"},{"text":" ","type":"text"},{"text":"a tuple. Because of this, it is ","type":"text"},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"text":" valid to use ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)","type":"reference","isActive":true},{"text":" with anything other than","type":"text"},{"text":" ","type":"text"},{"text":"the default synthesized memberwise initializer that structs are given for free by the compiler","type":"text"},{"text":" ","type":"text"},{"text":"as that function most correctly maps the data inside a struct to its tuple representation,","type":"text"},{"text":" ","type":"text"},{"text":"even enforcing the order of the fields.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you alter the initializer in any way you run the risk of introducing subtle bugs into","type":"text"},{"text":" ","type":"text"},{"text":"your parser-printer and potentially causing crashes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose we provided an alternative initializer to ","type":"text"},{"code":"Coordinate","type":"codeVoice"},{"text":" above that","type":"text"},{"text":" ","type":"text"},{"text":"allowed you to create a coordinate from a radius and angle measured in degrees:","type":"text"}],"type":"paragraph"},{"code":["extension Coordinate {","  init(radius: Double, angle: Double) {","    self.x = radius * cos(angle * Double.pi \/ 180)","    self.y = radius * sin(angle * Double.pi \/ 180)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This may seem innocent enough, but it is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" safe to use this initializer with"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)","isActive":true},{"type":"text","text":". The following parser-printer will correctly parse a radius and angle into"},{"type":"text","text":" "},{"type":"text","text":"an x\/y coordinate:"}],"type":"paragraph"},{"code":["let coord = ParserPrint(.memberwise(Coordinate.init(radius:angle:))) {","  Double.parser()","  \" @ \"","  Double.parser()","  \"°\"","}","","try coord.parse(\"1 @ 90°\")  \/\/ (x: 0, y: 1)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, printing a coordinate will "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" convert it back into a radius and angle, and"},{"type":"text","text":" "},{"type":"text","text":"instead will erroneously use (0, 1) as the radius and angle:"}],"type":"paragraph"},{"code":["try coord.print(.init(x: 0, y: 1))  \/\/ \"0 @ 1°\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This means this parser-printer does not round trip (see "},{"type":"text","text":"doc:Roundtripping"},{"type":"text","text":"), "},{"type":"emphasis","inlineContent":[{"text":"i.e.","type":"text"}]},{"type":"text","text":" if we"},{"type":"text","text":" "},{"type":"text","text":"parse and input and then print that output we do not get back the original input we started"},{"type":"text","text":" "},{"type":"text","text":"with:"}],"type":"paragraph"},{"code":["try coord.print(try coord.parse(\"1 @ 90°\")) == \"1 @ 90°\"  \/\/ ❌"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Further, it is possible to provide a custom initializer for a type that either re-orders the"},{"type":"text","text":" "},{"type":"text","text":"fields or add\/removes fields, both of which will cause the underlying "},{"code":"unsafeBitCast","type":"codeVoice"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"crash. For example, we could have a "},{"code":"User","type":"codeVoice"},{"type":"text","text":" struct that holds onto a string for the bio and an"},{"type":"text","text":" "},{"type":"text","text":"integer for the id, and provide a custom initializer so that the id is provided first:"}],"type":"paragraph"},{"code":["struct User {","  let bio: String","  let id: Int","  init(id: Int, bio: String) {","    self.bio = bio","    self.id = id","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, using this initializer with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)"},{"type":"text","text":" will cause printing to crash because"},{"type":"text","text":" "},{"type":"text","text":"it will try to bitcast a "},{"type":"codeVoice","code":"(String, Int)"},{"type":"text","text":" struct into a "},{"type":"codeVoice","code":"(Int, String)"},{"type":"text","text":" tuple:"}],"type":"paragraph"},{"code":["let user = ParsePrint(.memberwise(User.init(id:bio:))) {","  Int.parser()","  \",\"","  Rest()","}","","try user.print(.init(id: 42, bio: \"Hello world!\"))  \/\/ ❌"],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/FixedWidthIntegerToBinaryFloatingPoint/memberwise(_:)":{"abstract":[{"text":"A conversion from a tuple of values into a struct and a struct into a tuple of values, using a","type":"text"},{"text":" ","type":"text"},{"text":"memberwise initializer.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memberwise"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Values"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Struct"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Values"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Struct"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"memberwise(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/memberwise(_:)","type":"topic","url":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/memberwise(_:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/FixedWidthIntegerToBinaryFloatingPoint/Conversion-Implementations":{"title":"Conversion Implementations","type":"topic","url":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint\/conversion-implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint\/Conversion-Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"url":"\/documentation\/parsing","abstract":[],"role":"collection","kind":"symbol","type":"topic","title":"Parsing","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/Memberwise":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/Memberwise","title":"Conversions.Memberwise","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/conversions\/memberwise","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Memberwise","kind":"identifier"}],"navigatorTitle":[{"text":"Memberwise","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"url":"\/documentation\/parsing\/parserprinter","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"role":"symbol","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"title":"ParserPrinter","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversion/case(_:)-4j2n7":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversion\/case(_:)-4j2n7","title":"case(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/conversion\/case(_:)-4j2n7","abstract":[{"type":"text","text":"Converts the associated values of an enum case into the case, and an enum case into its"},{"type":"text","text":" "},{"text":"associated values.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`case`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Values","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Enum","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Values","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Enum","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions":{"type":"topic","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions","title":"Conversions","kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/conversions","abstract":[{"type":"text","text":"A namespace for types that serve as conversions."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Conversions","kind":"identifier"}],"navigatorTitle":[{"text":"Conversions","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Conversions/FixedWidthIntegerToBinaryFloatingPoint":{"url":"\/documentation\/parsing\/conversions\/fixedwidthintegertobinaryfloatingpoint","role":"symbol","type":"topic","title":"Conversions.FixedWidthIntegerToBinaryFloatingPoint","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Conversions\/FixedWidthIntegerToBinaryFloatingPoint","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FixedWidthIntegerToBinaryFloatingPoint","kind":"identifier"}],"abstract":[{"type":"text","text":"A conversion from an "},{"code":"Int","type":"codeVoice"},{"text":" to a ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"FixedWidthIntegerToBinaryFloatingPoint","kind":"identifier"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"}}}