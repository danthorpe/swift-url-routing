{"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/oneof"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Use this parser to list out a number of parsers in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder"},{"type":"text","text":" result builder block."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example uses "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf"},{"text":" to parse an enum value. To do so, it spells out a list of","type":"text"},{"text":" ","type":"text"},{"text":"parsers to ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":", one for each case:","type":"text"}],"type":"paragraph"},{"code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This parser fails if every parser inside fails:"}],"type":"paragraph"},{"code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If you are parsing input that should coalesce into some default, avoid using a final ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always"},{"text":" ","type":"text"},{"text":"parser, and instead opt for a trailing ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)"},{"text":", which returns a parser that","type":"text"},{"text":" ","type":"text"},{"text":"cannot fail:","type":"text"}],"type":"paragraph"},{"code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"],"syntax":"swift","type":"codeListing"},{"text":"Specificity","anchor":"Specificity","level":2,"type":"heading"},{"inlineContent":[{"text":"The order of the parsers in the above ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" does not matter because each of “€”, “£” and “$”","type":"text"},{"text":" ","type":"text"},{"text":"are mutually exclusive, i.e. at most one will succeed on any given input.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple"},{"type":"text","text":" "},{"type":"text","text":"can succeed on a given input) you must order them from most specific to least specific. That is,"},{"type":"text","text":" "},{"type":"text","text":"the first parser should succeed on the fewest number of inputs and the last parser should"},{"type":"text","text":" "},{"type":"text","text":"succeed on the most number of inputs."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of","type":"text"},{"text":" ","type":"text"},{"text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they","type":"text"},{"text":" ","type":"text"},{"text":"are quoted:","type":"text"}],"type":"paragraph"},{"code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here we have a list of last and first names separated by a comma, and some of the last names are"},{"type":"text","text":" "},{"type":"text","text":"quoted because they contain commas."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only"},{"type":"text","text":" "},{"type":"text","text":"if that fails we can parse a plain field that takes everything up until the next comma or"},{"type":"text","text":" "},{"type":"text","text":"newline:"}],"type":"paragraph"},{"code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then we can parse many fields to form an array of fields making up a line, and then parse many","type":"text"},{"text":" ","type":"text"},{"text":"lines to make up a full, doubly-nested array for the CSV:","type":"text"}],"type":"paragraph"},{"code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Running this parser on the input shows that it properly isolates each field of the CSV, even","type":"text"},{"text":" ","type":"text"},{"text":"fields that are quoted and contain a comma:","type":"text"}],"type":"paragraph"},{"code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The reason this parser works is because the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parsers are listed in","type":"text"},{"text":" ","type":"text"},{"text":"a very specific order inside the ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let field = OneOf {","  quotedField","  plainField","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" parser is a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"more"}]},{"text":" specific parser in that it will succeed on fewer inputs","type":"text"},{"text":" ","type":"text"},{"text":"than the ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parser does. For example:","type":"text"}],"type":"paragraph"},{"code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Whereas the "},{"type":"codeVoice","code":"plainField"},{"type":"text","text":" parser will happily succeed on anything the "},{"type":"codeVoice","code":"quotedField"},{"type":"text","text":" parser will"},{"type":"text","text":" "},{"type":"text","text":"succeed on:"}],"type":"paragraph"},{"code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"For this reason the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser must be listed first so that it can try its logic","type":"text"},{"text":" ","type":"text"},{"text":"first, which succeeds less frequently, before then trying the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser, which","type":"text"},{"text":" ","type":"text"},{"text":"succeeds more often.","type":"text"}],"type":"paragraph"},{"text":"Backtracking","anchor":"Backtracking","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","isActive":true},{"type":"text","text":" parser is the primary tool for introducing backtracking into your parsers,"},{"type":"text","text":" "},{"type":"text","text":"which means to undo the consumption of a parser when it fails. For more information, see the"},{"type":"text","text":" "},{"type":"text","text":"article "},{"type":"text","text":"doc:Backtracking"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"metadata":{"title":"OneOf","externalID":"s:7Parsing5OneOfV","navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"roleHeading":"Structure","symbolKind":"struct","role":"symbol","modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"]]},"references":{"doc://co.pointfree.URLRouting/documentation/Parsing/Parser":{"url":"\/documentation\/parsing\/parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"type":"codeVoice","code":"Input"},{"text":" value.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"title":"Parser","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/init(_:)":{"url":"\/documentation\/parsing\/oneof\/init(_:)","kind":"symbol","role":"symbol","title":"init(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/init(_:)","abstract":[],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/Parser-Implementations":{"role":"collectionGroup","abstract":[],"url":"\/documentation\/parsing\/oneof\/parser-implementations","type":"topic","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","kind":"article"},"doc://co.pointfree.URLRouting/documentation/Parsing/Always":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Always","url":"\/documentation\/parsing\/always","navigatorTitle":[{"kind":"identifier","text":"Always"}],"kind":"symbol","role":"symbol","title":"Always","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}],"type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/ParserPrinter":{"abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"role":"symbol","kind":"symbol","title":"ParserPrinter","conformance":{"constraints":[{"type":"codeVoice","code":"Parsers"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ParserPrinter"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/parsing\/parserprinter","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","role":"collectionGroup","url":"\/documentation\/parsing\/oneof\/parserprinter-implementations","kind":"article","type":"topic","abstract":[]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parse(_:)":{"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"title":"parse(_:)","url":"\/documentation\/parsing\/oneof\/parse(_:)","role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/parsers":{"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/parsers","title":"parsers","abstract":[],"role":"symbol","url":"\/documentation\/parsing\/oneof\/parsers","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers"}]},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf","url":"\/documentation\/parsing\/oneof","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"kind":"symbol","role":"symbol","title":"OneOf","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}],"type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOf/replaceError(with:)":{"abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"role":"symbol","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"ReplaceError","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"replaceError(with:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)"},"doc://co.pointfree.URLRouting/documentation/Parsing/OneOfBuilder":{"abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}],"title":"OneOfBuilder","url":"\/documentation\/parsing\/oneofbuilder","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/OneOfBuilder","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOfBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"OneOfBuilder"}],"role":"symbol"},"doc://co.pointfree.URLRouting/documentation/Parsing":{"url":"\/documentation\/parsing","abstract":[],"role":"collection","kind":"symbol","type":"topic","title":"Parsing","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing"}}}