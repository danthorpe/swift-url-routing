{"abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given closure with the"},{"text":" ","type":"text"},{"text":"output of this parser.","type":"text"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder\/PathZipVOOOOO\/compactMap(_:)"},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV","kind":"typeIdentifier","text":"CompactMap"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"symbolKind":"method","extendedModule":"Parsing","role":"symbol","modules":[{"name":"URLRouting"}],"roleHeading":"Instance Method","title":"compactMap(_:)","externalID":"s:7Parsing6ParserPAAE10compactMapyAA7ParsersO07CompactD0Vy_xqd__Gqd__Sg6OutputQzclF::SYNTHESIZED::s:10URLRouting11PathBuilderO0B9ZipVOOOOOV"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"transform","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"CompactMap","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers\/CompactMap","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given transformation"},{"type":"text","text":" "},{"type":"text","text":"with the output of this parser."}]}]},{"kind":"parameters","parameters":[{"name":"transform","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that accepts output of this parser as its argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns an optional value.","type":"text"}]}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method is similar to ","type":"text"},{"code":"Sequence.compactMap","type":"codeVoice"},{"text":" in the Swift standard library, as well as","type":"text"},{"text":" ","type":"text"},{"code":"Publisher.compactMap","type":"codeVoice"},{"text":" in the Combine framework.","type":"text"}]},{"type":"codeListing","code":["let evenParser = Int.parser().compactMap { $0.isMultiple(of: 2) ? $0 : nil }","","var input = \"124 hello world\"[...]","try evenParser.parse(&input)  \/\/ 124","input                         \/\/ \" hello world\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser fails when the provided closure returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". For example, the following parser tries"},{"type":"text","text":" "},{"type":"text","text":"to convert two characters into a hex digit, but fails to do so because "},{"type":"codeVoice","code":"\"GG\""},{"type":"text","text":" is not a valid"},{"type":"text","text":" "},{"type":"text","text":"hex number:"}]},{"type":"codeListing","code":["var input = \"GG0000\"[...]","let hex = try Prefix(2).compactMap { Int(String($0), radix: 16) }.parse(&input)","\/\/ error: failed to process \"Int\" from \"GG\"","\/\/  --> input:1:1-2","\/\/ 1 | GG0000","\/\/   | ^^"],"syntax":"swift"},{"level":2,"type":"heading","text":"Printability","anchor":"Printability"},{"type":"paragraph","inlineContent":[{"code":"Parser.compactMap","type":"codeVoice"},{"text":" is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" printable, as a failable transform operation to some new output","type":"text"},{"text":" ","type":"text"},{"text":"does not provide enough information to perform a transformation from that new output back to","type":"text"},{"text":" ","type":"text"},{"text":"the old.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are building a parser-printer, avoid uses of "},{"code":"compactMap","type":"codeVoice"},{"type":"text","text":" and instead use"},{"type":"text","text":" "},{"code":"Parser\/map(_:)-18m9d","type":"codeVoice"},{"type":"text","text":" with a failable "},{"code":"Conversion","type":"codeVoice"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting","doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder","doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder\/PathZipVOOOOO","doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder\/PathZipVOOOOO\/Parser-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/urlrouting\/pathbuilder\/pathzipvooooo\/compactmap(_:)"]}],"references":{"doc://co.pointfree.URLRouting/documentation/URLRouting/PathBuilder/PathZipVOOOOO":{"title":"PathBuilder.PathZipVOOOOO","type":"topic","navigatorTitle":[{"text":"PathZipVOOOOO","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathZipVOOOOO","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder\/PathZipVOOOOO","url":"\/documentation\/urlrouting\/pathbuilder\/pathzipvooooo"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parsers":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"title":"Parsers","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"url":"\/documentation\/parsing\/parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"type":"topic"},"http://github.com/pointfreeco/swift-parsing":{"titleInlineContent":[{"type":"text","text":"Parsing"}],"type":"link","identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing","url":"http:\/\/github.com\/pointfreeco\/swift-parsing","title":"Parsing"},"doc://co.pointfree.URLRouting/documentation/URLRouting/PathBuilder/PathZipVOOOOO/Parser-Implementations":{"type":"topic","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder\/PathZipVOOOOO\/Parser-Implementations","kind":"article","url":"\/documentation\/urlrouting\/pathbuilder\/pathzipvooooo\/parser-implementations","role":"collectionGroup","abstract":[]},"doc://co.pointfree.URLRouting/documentation/URLRouting/PathBuilder":{"role":"symbol","url":"\/documentation\/urlrouting\/pathbuilder","navigatorTitle":[{"text":"PathBuilder","kind":"identifier"}],"abstract":[{"type":"text","text":"A custom parameter attribute that constructs path component parsers from closures. The"},{"type":"text","text":" "},{"type":"text","text":"constructed parser runs a number of parsers against each patch component, one after the other,"},{"type":"text","text":" "},{"type":"text","text":"and accumulates their outputs."}],"kind":"symbol","title":"PathBuilder","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathBuilder","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.URLRouting/documentation/URLRouting":{"title":"URLRouting","role":"collection","kind":"symbol","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting","abstract":[{"type":"text","text":"A bidirectional URL router with more type safety and less fuss. This library is built with "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-parsing"},{"type":"text","text":"."}],"url":"\/documentation\/urlrouting","type":"topic"},"doc://co.pointfree.URLRouting/documentation/URLRouting/PathBuilder/PathZipVOOOOO/compactMap(_:)":{"title":"compactMap(_:)","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/URLRouting\/PathBuilder\/PathZipVOOOOO\/compactMap(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"CompactMap","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO10CompactMapV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/urlrouting\/pathbuilder\/pathzipvooooo\/compactmap(_:)","role":"symbol","abstract":[{"type":"text","text":"Returns a parser that outputs the non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" result of calling the given closure with the"},{"type":"text","text":" "},{"type":"text","text":"output of this parser."}],"type":"topic"},"doc://co.pointfree.URLRouting/documentation/Parsing/Parsers/CompactMap":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CompactMap","kind":"identifier"}],"title":"Parsers.CompactMap","identifier":"doc:\/\/co.pointfree.URLRouting\/documentation\/Parsing\/Parsers\/CompactMap","abstract":[{"text":"A parser that outputs the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" result of calling the given transformation with the output","type":"text"},{"text":" ","type":"text"},{"text":"of its upstream parser.","type":"text"}],"type":"topic","url":"\/documentation\/parsing\/parsers\/compactmap","kind":"symbol","navigatorTitle":[{"text":"CompactMap","kind":"identifier"}],"role":"symbol"}}}